{
  "bookDomainAnalysis": {
    "currentArchitecture": {
      "description": "Books currently belong to clubs via a belongsTo relationship, creating a club-level book system.",
      "problemStatement": "Need to support both club-level books (for curriculum tracking) AND individual student-level books (for personal progress tracking)"
    },
    
    "domainClasses": {
      "Book.groovy": {
        "currentRelationships": {
          "belongsTo": "[club: Club]",
          "hasMany": "[chapters: Chapter]"
        },
        "currentFields": [
          "String name",
          "String coverImage", 
          "Boolean isPrimary = false"
        ],
        "methods": [
          "getPrimaryBook()",
          "getOrderedChapters()",
          "getTotalChapters()"
        ],
        "impactAssessment": "HIGH - Core domain class that needs restructuring",
        "changeRequired": "Add support for both club-level and student-level books, possibly through inheritance or composition"
      },
      
      "Club.groovy": {
        "currentRelationships": {
          "hasMany": "[students: Student, books: Book]"
        },
        "methods": [
          "getPrimaryBook() - Returns primary book for curriculum tracking"
        ],
        "impactAssessment": "MEDIUM - Currently manages books collection",
        "changeRequired": "May need separate collections for curriculum books vs available books"
      },
      
      "Student.groovy": {
        "currentRelationships": {
          "belongsTo": "[household: Household, club: Club]",
          "hasMany": "[attendances: Attendance, sectionVerseCompletions: SectionVerseCompletion]"
        },
        "bookRelation": "MISSING - Students don't currently have their own books",
        "impactAssessment": "HIGH - Needs new relationship to individual books",
        "changeRequired": "Add book relationship for individual student progress tracking"
      },
      
      "Chapter.groovy": {
        "currentRelationships": {
          "belongsTo": "[book: Book]",
          "hasMany": "[chapterSections: ChapterSection]"
        },
        "impactAssessment": "LOW - Chapters belong to books, shouldn't change",
        "changeRequired": "None - relationship should remain stable"
      },
      
      "Calendar.groovy": {
        "bookUsage": "Uses club.getPrimaryBook() for curriculum tracking in getCurrentSection()",
        "lines": ["89: Book targetBook = book ?: club.getPrimaryBook()"],
        "impactAssessment": "MEDIUM - Relies on club's primary book concept",
        "changeRequired": "May need to adapt to new book architecture"
      }
    },
    
    "backendCode": {
      "BootstrapService.groovy": {
        "bookCreationMethods": [
          "createBooksAndChapters(Map<String, Club> clubs)",
          "createCubbiesBooks(Club club)",
          "createSparksBooks(Club club)", 
          "createTTBooks(Club club)",
          "createTrekBooks(Club club)",
          "createChapter(Book book, Integer chapterNumber, String name, String sectionVerse, String parentVerse)"
        ],
        "currentLogic": "Creates books and assigns them directly to clubs",
        "impactAssessment": "HIGH - Core data creation logic needs restructuring",
        "changeRequired": "Separate club curriculum books from student instance books"
      },
      
      "UniversalController.groovy": {
        "bookEndpoints": [
          "verseCompletion viewRenderMap - Gets chapters from all club books (line 175-178)",
          "clubBooks viewRenderMap - Manages book assignment to clubs (line 700-709)",
          "chapterSections viewRenderMap - Handles book chapter sections (line 732)"
        ],
        "currentLogic": "club.books?.each { book -> chapters.addAll(book.chapters) }",
        "impactAssessment": "HIGH - Multiple endpoints need to handle new book structure",
        "changeRequired": "Update to handle both club curriculum books and student books"
      }
    },
    
    "frontendTemplates": {
      "_clubBooks.gsp": {
        "functionality": "Club book management interface",
        "bookUsage": [
          "Shows assigned books: club?.books?.size()",
          "Lists individual books: club.books with book.name and book.chapters?.size()",
          "Book assignment/removal buttons",
          "Create new book form with club.id assignment"
        ],
        "impactAssessment": "HIGH - Core book management UI",
        "changeRequired": "Distinguish between curriculum books and available student books"
      },
      
      "_clubsList.gsp": {
        "functionality": "Club overview cards",
        "bookUsage": [
          "Shows book count: club.books?.size() ?: 0",
          "Manage Books button: viewType=clubBooks&clubId=${club.id}"
        ],
        "impactAssessment": "MEDIUM - Display stats need updating",
        "changeRequired": "Update book count display to reflect new architecture"
      },

      "_clubOverview.gsp": {
        "functionality": "Individual club detail view with student list",
        "bookUsage": [
          "Access through club.name navigation",
          "Verse Progress buttons: viewType=verseCompletion&studentId=${student.id}",
          "Links students to verse completion system"
        ],
        "impactAssessment": "MEDIUM - Student-to-verse completion flow",
        "changeRequired": "May need to pass book context for individual student progress"
      },

      "verseCompletion.gsp": {
        "functionality": "Main verse completion page shell",
        "bookUsage": [
          "Loads dynamic content via: hx-get=\"/renderView?viewType=verseCompletion\""
        ],
        "impactAssessment": "LOW - Just page shell",
        "changeRequired": "None - just loads dynamic content"
      },

      "_verseCompletion.gsp": {
        "functionality": "Core verse completion interface",
        "bookUsage": [
          "Chapter selection dropdown: chapters variable from controller",
          "Chapter data: chapter.name and chapter.sectionVerse (line 80)",
          "HTMX chapter sections loading: hx-get=\"/renderView?viewType=chapterSections\"",
          "Student selection with club context: student.club.name (line 45)"
        ],
        "impactAssessment": "CRITICAL - Core verse tracking functionality",
        "changeRequired": "Must handle individual student book progress vs club curriculum",
        "criticalLines": [
          "Line 79-81: Chapter selection from ${chapters} collection",
          "Line 74-77: chapterSections HTMX loading with chapter selection",
          "Line 45: Student club context display"
        ]
      },

      "_chapterSections.gsp": {
        "functionality": "Dynamic chapter sections loading",
        "bookUsage": [
          "Displays sections from selected chapter",
          "Section selection for verse completion: selectSection(${section.id})",
          "Silver/Gold section badges: section.isSilverSection, section.isGoldSection"
        ],
        "impactAssessment": "HIGH - Section selection for verse completion",
        "changeRequired": "Needs to handle individual student progress within sections",
        "criticalLines": [
          "Line 1-35: Section iteration and selection interface",
          "Line 12-28: Silver and Gold section identification"
        ]
      },

      "_studentAttendanceDetail.gsp": {
        "functionality": "Individual student attendance tracking interface",
        "bookUsage": [
          "Handbook checkbox: hasHandbook toggle (lines 154-167)",
          "Handbook represents student's physical Awana book",
          "Buck calculation: '*Bible + Handbook = +1 buck total' (line 173)",
          "Individual student book possession tracking per meeting"
        ],
        "impactAssessment": "HIGH - Individual student book possession tracking",
        "changeRequired": "Critical - handbook tracking must align with individual student books",
        "criticalLines": [
          "Line 155-167: Handbook toggle with attendance?.hasHandbook",
          "Line 173: Bible + Handbook buck calculation rule",
          "Line 234: JavaScript hasHandbook input handling"
        ],
        "bookDomainConnection": "Handbook = Student's individual Awana book/handbook"
      },

      "_familyCheckIn.gsp": {
        "functionality": "Family check-in interface with attendance toggles",
        "bookUsage": [
          "Handbook toggle button: toggleAttendance(studentId, 'handbook') (line 112)",
          "Combined Bible & Handbook display: 'Bible & Handbook' (line 108)",
          "Handbook attendance state: attendance?.hasHandbook (line 114)",
          "Buck calculation: (hasBible && hasHandbook) logic (line 131)",
          "JavaScript handbook button handling: handbook-${student.id} (line 193)"
        ],
        "impactAssessment": "HIGH - Core check-in handbook tracking",
        "changeRequired": "Critical - family check-in must track individual student handbooks",
        "criticalLines": [
          "Line 112-123: Handbook toggle button and state",
          "Line 131: Combined Bible+Handbook buck calculation",
          "Line 175: JavaScript handbook styling 'bg-orange-500 text-white'",
          "Line 193-199: JavaScript handbook button logic"
        ],
        "bookDomainConnection": "Handbook = Individual student's physical book for check-in"
      },

      "_attendanceClubStudents.gsp": {
        "functionality": "Club attendance overview showing student badges",
        "bookUsage": [
          "Handbook badge display: attendance?.hasHandbook (line 67)",
          "Handbook status indicator: 'Handbook' badge (line 69)",
          "Bible and Handbook status badges alongside attendance"
        ],
        "impactAssessment": "MEDIUM - Visual handbook status display",
        "changeRequired": "Update handbook badge display for individual books",
        "criticalLines": [
          "Line 67-71: Handbook status badge conditional display"
        ],
        "bookDomainConnection": "Shows handbook possession status per student"
      },

      "_studentList.gsp": {
        "functionality": "Student list template with verse completion stats",
        "bookUsage": [
          "Verse completion count: student.sectionVerseCompletions?.size() (line 37)",
          "Shows student progress in verse memorization"
        ],
        "impactAssessment": "MEDIUM - Student verse progress display",
        "changeRequired": "Verse completion stats must reflect individual book progress",
        "criticalLines": [
          "Line 37: sectionVerseCompletions count display"
        ],
        "bookDomainConnection": "Shows verse completion progress tied to book sections"
      },

      "_studentSearch.gsp": {
        "functionality": "Student search with filter options including verse completions",
        "bookUsage": [
          "Recent Verse Completions filter: filter == 'recentCompletions' (line 19)",
          "Verse completion button: viewType=verseCompletion&studentId (line 52)",
          "Verses progress link (line 59)"
        ],
        "impactAssessment": "MEDIUM - Search and navigation to verse completion",
        "changeRequired": "Search filters must account for individual book progress",
        "criticalLines": [
          "Line 19: Recent completions filter",
          "Line 52: Direct link to verse completion for student",
          "Line 59: Verses progress display"
        ],
        "bookDomainConnection": "Navigation to individual student verse/book progress"
      },

      "index.gsp": {
        "functionality": "Main dashboard with global JavaScript functions",
        "bookUsage": [
          "Global showVerseCompletion function reference (line 239)"
        ],
        "impactAssessment": "LOW - Just function reference",
        "changeRequired": "None - just global function export",
        "criticalLines": [
          "Line 239: window.showVerseCompletion = showVerseCompletion"
        ],
        "bookDomainConnection": "Global navigation to verse completion system"
      }
    },
    
    "dataFlow": {
      "currentFlow": [
        "1. BootstrapService creates books and assigns to clubs",
        "2. Clubs have a collection of books via hasMany relationship", 
        "3. Students access books through their club relationship",
        "4. Club.getPrimaryBook() returns main curriculum book",
        "5. Calendar.getCurrentSection() uses club's primary book for tracking"
      ],
      "problemAreas": [
        "Students can't have individual book progress",
        "All students in a club share the same books",
        "No way to track per-student book completion",
        "Curriculum tracking is club-wide, not individualized"
      ]
    },
    
    "proposedChanges": {
      "approachOptions": [
        {
          "option": "Dual Book System",
          "description": "Keep current Club->Book for curriculum, add Student->StudentBook for individual progress",
          "pros": ["Minimal disruption", "Clear separation of concerns"],
          "cons": ["More complex domain model", "Potential data duplication"]
        },
        {
          "option": "Book Instance Pattern", 
          "description": "Book templates assigned to clubs, BookInstance assigned to students",
          "pros": ["Clean separation", "Flexible", "Follows established patterns"],
          "cons": ["Major refactoring required", "Migration complexity"]
        },
        {
          "option": "Progress Tracking Entity",
          "description": "Keep current books, add StudentBookProgress entity",
          "pros": ["Minimal domain changes", "Progress-focused"],
          "cons": ["Doesn't address core ownership issue"]
        }
      ]
    },
    
    "migrationPlan": {
      "phase1": [
        "Create new domain relationships",
        "Update BootstrapService to create both club and student books", 
        "Add migration script for existing data"
      ],
      "phase2": [
        "Update UniversalController viewRenderMap entries",
        "Modify frontend templates to handle new book structure",
        "Update Calendar.getCurrentSection() logic"
      ],
      "phase3": [
        "Test all book-related functionality",
        "Update verse completion system",
        "Validate progress tracking works correctly"
      ]
    },
    
    "filesToModify": {
      "critical": [
        "/grails-app/domain/awana/Book.groovy",
        "/grails-app/domain/awana/Student.groovy", 
        "/grails-app/domain/awana/Club.groovy",
        "/grails-app/services/awana/BootstrapService.groovy",
        "/grails-app/views/universal/books/_verseCompletion.gsp",
        "/grails-app/views/universal/checkin/_familyCheckIn.gsp"
      ],
      "high": [
        "/grails-app/controllers/awana/UniversalController.groovy",
        "/grails-app/views/universal/clubs/_clubBooks.gsp",
        "/grails-app/domain/awana/Calendar.groovy",
        "/grails-app/views/universal/books/_chapterSections.gsp",
        "/grails-app/views/universal/attendance/_studentAttendanceDetail.gsp"
      ],
      "medium": [
        "/grails-app/views/universal/clubs/_clubsList.gsp",
        "/grails-app/views/universal/clubs/_clubOverview.gsp",
        "/grails-app/views/universal/attendance/_attendanceClubStudents.gsp",
        "/grails-app/views/universal/students/_studentList.gsp",
        "/grails-app/views/universal/students/_studentSearch.gsp"
      ],
      "low": [
        "/grails-app/views/universal/verseCompletion.gsp",
        "/grails-app/views/universal/index.gsp",
        "Internationalization files (messages_*.properties)"
      ]
    },
    
    "riskAssessment": {
      "dataLoss": "HIGH - Existing book assignments could be lost without careful migration",
      "functionality": "HIGH - Core verse completion and progress tracking will break",
      "timeline": "MEDIUM - Will require coordinated changes across multiple layers",
      "testing": "HIGH - Need comprehensive testing of all book-related workflows"
    }
  }
}